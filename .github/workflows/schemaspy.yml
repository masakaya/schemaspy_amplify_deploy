name: Schemaspy
on:
  - workflow_dispatch
  - push
  # When modify database schema
  
env:
  # use a secret key if necessary
  BRANCH_NAME : main
  MYSQL_DATABASE : classicmodels
  MYSQL_ROOT_PASSWORD : P@ssw0rd
  MYSQL_USER : root
  MYSQL_PASSWORD : root
  MYSQL_PORT : 3306
  AMPLIFY_APP_ID: d150bg29zh0mzi
jobs:
  schemaspy:
    runs-on: ubuntu-20.04
    services:
      db:
        image:  mysql/mysql-server:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }} 
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }} 
          MYSQL_USER:  ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Show Docker containers
        run: docker ps -a
      - name: Show databases
        run: mysql --protocol=tcp -h localhost -P ${{ env.MYSQL_PORT }} -u ${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }} -e "SHOW DATABASES"
      - uses: actions/checkout@v3
      - name: Run Migration
        uses: docker://flyway/flyway:9
        env:
          FLYWAY_URL: jdbc:mysql://db:${{env.MYSQL_PORT}}/${{env.MYSQL_DATABASE}}?allowPublicKeyRetrieval=true&useSSL=false&passwordCharacterEncoding=UTF-8
          FLYWAY_USER: ${{ env.MYSQL_USER }}
          FLYWAY_PASSWORD: ${{ env.MYSQL_PASSWORD}}
          FLYWAY_LOCATIONS: filesystem:./ddl
        with:
          args: migrate
      - name: Show table 
        run: mysql --protocol=tcp -h localhost -P ${{env.MYSQL_PORT}} -u ${{env.MYSQL_USER }} -p${{env.MYSQL_PASSWORD }} ${{ env.MYSQL_DATABASE }} -e "SHOW TABLES"
      - name: Create dist
        run: | 
          sudo mkdir $(pwd)/dist
          sudo chmod 777 $(pwd)/dist
      - name: Run SchemaSpy
        run: |
          docker run \
          --rm \
          --net=${{ job.container.network }} \
          -e TZ=Asia/Tokyo \
          -v ${{ github.workspace }}/dist:/output \
          -v $PWD/schemaspy.properties:/schemaspy.properties \
          schemaspy/schemaspy:latest \
          -vizjs
      - name: check
        run : ls ${{ github.workspace }}/dist
      - name: zip arcive
        uses: montudor/action-zip@v1
        with:
            args: zip -qq -r archive.zip dist
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: schemaspy-artifact
          path: archive.zip
  deploy:
    runs-on: ubuntu-20.04
    needs: schemaspy
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: schemaspy-artifact
          path: /var/tmp/
      - name: Get branch tname
        id: branch-name
        uses: tj-actions/branch-names@v7
      - name: check
        run : ls /var/tmp/*.zip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::121936954111:role/github-actions
          aws-region: ap-northeast-1
      - name: create amplify deployment ( default )
        if: steps.branch-name.outputs.is_default == 'true'
        run : |
          aws amplify get-branch --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name main \
           || aws amplify create-branch --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name main
          aws amplify create-deployment --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name main | tee deployment.json
      - name: create amplify deployment ( pull request )
        if: steps.branch-name.outputs.is_tag == 'false' && steps.branch-name.outputs.is_default == 'false'
        run : |
          aws amplify get-branch --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ steps.branch-name.outputs.current_branch }} \
            || aws amplify create-branch --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ steps.branch-name.outputs.current_branch }} \
          aws amplify create-deployment --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ steps.branch-name.outputs.current_branch }} | tee deployment.json
      - name: create amplify deployment ( tags )
        if: steps.branch-name.outputs.is_tag == 'true'
        run : |
          aws amplify get-branch --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ steps.branch-name.outputs.tag }} \
            || aws amplify create-branch --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ steps.branch-name.outputs.tag }} \
          aws amplify create-deployment --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ steps.branch-name.outputs.tag }} | tee deployment.json
      - name : debug deployment.json
        run : cat deployment.json
